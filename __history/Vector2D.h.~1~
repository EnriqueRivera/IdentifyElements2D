#ifndef VECTOR_2D_H
#define VECTOR_2D_H

#include <iostream>
#include <vector>
#include "Point2D.h"

enum VectorType
{
	STRAIGHT,
	CURVE
};

class Vector2D 
{
	public:
		inline Vector2D(std::vector<Point2D*> points) : points(points)
		{
			type = points.size() == 2 ? STRAIGHT : CURVE;
		}

		inline VectorType getType()
		{
			return type;
		}

		inline std::vector<Point2D*> &getPoints()
		{
			return points;
		}

		inline int getPtsCount()
		{
			return points.size();
		}

		inline bool equals(Vector2D *vector)
		{
			if (!vector)
			{
				return false;
			}

			if (type == STRAIGHT)
			{
				return points[0]->equals(vector->getPoints()[0]) && points[1]->equals(vector->getPoints()[1]);
			}
			else
			{
				if (points.size() != vector->getPtsCount())
				{
					return false;
				}
				else
				{
					size_t size = points.size();
					for (size_t i = 0; i < size; i++)
					{
						if(!points[i]->equals(vector->getPoints()[i]))
						{
							return false;
						}
					}

					return true;
				}
			}
		}

	private:
		VectorType type;
		std::vector<Point2D*> points;

		friend std::ostream& operator << (std::ostream&, const Vector2D&);
};

std::ostream& operator << (std::ostream & strm, const Vector2D & vector) 
{
	size_t size = vector.points.size();
	for (size_t i = 0; i < size; i++)
	{
		strm << *vector.points[i] << std::endl;
	}

	return strm;
}

#endif
