#ifndef ELEMENTS_2D_H
#define ELEMENTS_2D_H

#include <vector>
#include "Point2D.h"
#include "Segment2D.h"
#include "Polygon2D.h"
#include "Ellipse2D.h"
#include "BezierCurve2D.h"
#include "Composed2D.h"

class Elements2D
{
	public:
		inline Elements2D() {}

		inline ~Elements2D()
		{

		}

		inline std::vector<Point2D*> getPoints()
		{
			return points;
		}

		inline std::vector<Segment2D*> getSegments()
		{
			return segments;
		}

		inline std::vector<Polygon2D*> getPolygons()
		{
			return polygons;
		}

		inline std::vector<Ellipse2D*> getEllipses()
		{
			return ellipses;
		}

		inline std::vector<BezierCurve2D*> getBeziers()
		{
			return beziers;
		}

		inline std::vector<Composed2D*> getComps()
		{
			return comps;
		}

		inline int getPtsCount()
		{
			return points.size();
		}

		inline int getSegCount()
		{
			return segments.size();
		}

		inline int getPolyCount()
		{
			return polygons.size();
		}

		inline int getElliCount()
		{
			return ellipses.size();
		}

		inline int getBezCount()
		{
			return beziers.size();
		}

		inline int getCompsCount()
		{
			return comps.size();
		}

		inline void setPoints(std::vector<Point2D*> points)
		{
			this->points = points;
		}

		inline void setSegments(std::vector<Segment2D*> segments)
		{
			this->segments = segments;
		}

		inline void setPolygons(std::vector<Polygon2D*> polygons)
		{
			this->polygons = polygons;
		}

		inline void setEllipses(std::vector<Ellipse2D*> ellipses)
		{
			this->ellipses = ellipses;
		}

		inline void setBeziers(std::vector<BezierCurve2D*> beziers)
		{
			this->beziers = beziers;
		}

		inline void setComps(std::vector<Composed2D*> comps)
		{
			this->comps = comps;
		}

	private:
		std::vector<Point2D*> points;
		std::vector<Segment2D*> segments;
		std::vector<Polygon2D*> polygons;
		std::vector<Ellipse2D*> ellipses;
		std::vector<BezierCurve2D*> beziers;
		std::vector<Composed2D*> comps;
};

#endif

