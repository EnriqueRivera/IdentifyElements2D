#ifndef LINE2D_H
#define LINE2D_H

#include <vector>
#include <iostream>
#include "Point2D.h"
#include "CompareDouble.h"
#include "SortPoints2D.h"

class Segment2D
{
	public:
		inline Segment2D(Point2D *p1, Point2D *p2)  : p1(p1), p2(p2)
		{
			sort_points::sortPointsX(this->p1, this->p2);
		}

		inline void calculateSlopeAndB(double &m, double &b)
		{
			calculateSlopeAndB(p1, p2, m, b);
		}

		static inline void calculateSlopeAndB(Point2D *p1, Point2D *p2, double &m, double &b)
		{
			// Si son iguales las coordenadas en X, entonces la pendiente es infinita
			if (isEqual(p1->getX(), p2->getX())) {
				m = INF;
				b = 0.0;
			}
			// Si son iguales las coordenadas en Y, entonces la pendiente es 0
			else if (isEqual(p1->getY(), p2->getY())) {
				m = 0.0;
				b = p1->getY();
			}
			else {
				// Calculamos la pendiente
				m = (p2->getY() - p1->getY()) / (p2->getX() - p1->getX());

				// Calculamos el punto de interseccion en la ordenada
				b = (m * -1.0 * p1->getX()) + p1->getY();
			}
		}

		inline Point2D *getP1()
		{
			return p1;
		}

		inline Point2D *getP2()
		{
			return p2;
		}

		inline double getX1() {
			return p1->getX();
		}

		inline double getX2() {
			return p2->getX();
		}

		inline double getY1() {
			return p1->getY();
		}

		inline double getY2() {
			return p2->getY();
		}

	private:
		Point2D *p1, *p2;

		friend std::ostream& operator << (std::ostream&, const Segment2D&);
};

std::ostream& operator << (std::ostream & strm, const Segment2D & line)
{
	return strm << "[(" << line.p1->getX() << ", " << line.p1->getY()
		<< "), (" << line.p2->getX() << ", " << line.p2->getY()
		<< ")]";
}

#endif
